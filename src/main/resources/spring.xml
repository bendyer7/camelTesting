<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:camel="http://camel.apache.org/schema/spring"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
         http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
         http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
         http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">


    <camel:camelContext id="BasicStandalone">

        <!-- this needs to be positioned within the camelContext-->
        <!--<camel:package>org.ben.routebuilders</camel:package>-->
        <camel:package>org.ben.routeBuilders2</camel:package>
    </camel:camelContext>







    <bean id="jmsConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
        <property name="brokerURL" value="tcp://localhost:61616"/>
    </bean>

    <!-- with maxConnections 8: on startup created 3 TCP connections, with thread for each one-->
    <bean id="pooledConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory" init-method="start" destroy-method="stop">
        <property name="maxConnections" value="1"/>
        <property name="connectionFactory" ref="jmsConnectionFactory"/>
    </bean>

    <bean id="txManager"
          class="org.springframework.jms.connection.JmsTransactionManager">
        <property name="connectionFactory" ref="pooledConnectionFactory"/>
    </bean>


    <!-- with concurrentConsumers 10: 10 consumer threads created per route component-->
    <bean id="jmsConfig" class="org.apache.camel.component.jms.JmsConfiguration">
        <property name="connectionFactory" ref="pooledConnectionFactory"/>
        <property name="concurrentConsumers" value="1"/>
    </bean>

    <bean id="jmsConfigXacted" class="org.apache.camel.component.jms.JmsConfiguration">
        <property name="connectionFactory" ref="pooledConnectionFactory"/>
        <property name="concurrentConsumers" value="1"/>
    </bean>




    <bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent">
        <property name="configuration" ref="jmsConfig"/>
        <property name="transacted" value="false"/>
        <!-- If transacted=true then enable CACHE_CONSUMER (if not using XA) to run faster. See more details at: http://camel.apache.org/jms -->
        <!--  <property name="transacted" value="true"/> <property name="cacheLevelName" value="CACHE_CONSUMER"/> -->
    </bean>

    <!-- even with the above with transacted set to false, if you have a different compoActiveMQComponent nent using the same jmsConfig
    which is transacted, then the above component will also become transacted even though you said faise.

    but all you need to do is have a separate JmsConfiguration for each component and this allows 1 out of the 2 components to be transacted, as per the setup here.
    Note that both JmsConfigurations can use the same connectionFactory / connection pool. -->


    <bean id="activemqXacted" class="org.apache.activemq.camel.component.ActiveMQComponent">
        <property name="configuration" ref="jmsConfigXacted"/>
        <!-- If transacted=true then enable CACHE_CONSUMER (if not using XA) to run faster. See more details at: http://camel.apache.org/jms -->
        <!--  <property name="transacted" value="true"/> <property name="cacheLevelName" value="CACHE_CONSUMER"/> -->
        <property name="transacted" value="true"/>
        <property name="transactionManager" ref="txManager" />
        <!-- other options include timeouts, strategies for rollbakcon commit failure etc see: http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/transaction.html -->
    </bean>



</beans>